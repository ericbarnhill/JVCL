/* Copyright (c) 2015 Eric Barnhill
*
*Permission is hereby granted, free of charge, to any person obtaining a copy
*of this software and associated documentation files (the "Software"), to deal
*in the Software without restriction, including without limitation the rights
*to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*copies of the Software, and to permit persons to whom the Software is
*furnished to do so, subject to the following conditions:
*
*The above copyright notice and this permission notice shall be included in all
*copies or substantial portions of the Software.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*SOFTWARE.
*/

package jvcl;

public class DimShift {
	
	/** A utility class to shift dimensions. Equivalent to Matlab shiftDim. 
	*/
	public DimShift() {};

	public double[][] shiftDim(double[][] image) {
		int width = image.length;
		int height = image[0].length;
		double[][] result = new double[width][height];
		for (int x = 0; x < width; x++) {
			for (int y = 0; y < height; y++) {
				result[x][y] = image[y][x];
			}
		}
		return result;
	}

	public float[][] shiftDim(float[][] image) {
		int width = image.length;
		int height = image[0].length;
		float[][] result = new float[width][height];
		for (int x = 0; x < width; x++) {
			for (int y = 0; y < height; y++) {
				result[x][y] = image[y][x];
			}
		}
		return result;
	}

	public double[][][] shiftDim(double[][][] image) {
		int width = image.length;
		int height = image[0].length;
		int depth = image[0][0].length;
		double[][][] result = new double[width][height][depth];
		for (int x = 0; x < width; x++) {
			for (int y = 0; y < height; y++) {
				for (int z = 0; z < depth; z++) {
					result[x][y][z] = image[y][z][x];
				}
			}
		}
		return result;
	}
	
	public float[][][] shiftDim(float[][][] volume) {
		int width = volume.length;
		int height = volume[0].length;
		int depth = volume[0][0].length;
		float[][][] result = new float[width][height][depth];
		for (int x = 0; x < width; x++) {
			for (int y = 0; y < height; y++) {
				for (int z = 0; z < depth; z++) {
					result[x][y][z] = volume[y][z][x];
				}
			}
		}
		return result;
	}
	
	/** Shifts dimensions of 3D volume.
    *  @param volume   3D array volume
    *  @param nDims    if [x][y][z] 1 = move y array to x position and z to y; 2 = move z array to x position and y to z 
    *  @return double[][][]
    */
	public double[][][] shiftDim(double[][][] volume, int nDims) {
		int width = volume.length;
		int height = volume[0].length;
		int depth = volume[0][0].length;
		nDims = nDims % 3;
		double[][][] result;
		if (nDims == 1) {
			result = new double[height][depth][width];
			for (int x = 0; x < height; x++) {
				for (int y = 0; y < depth; y++) {
					for (int z = 0; z < width; z++) {
						result[x][y][z] = volume[y][z][x];
					}
				}
			}
		} else if (nDims == 2) {
			result = new double[depth][width][height];
			for (int x = 0; x < depth; x++) {
				for (int y = 0; y < width; y++) {
					for (int z = 0; z < height; z++) {
						result[x][y][z] = volume[z][x][y];
					}
				}
			}
		} else return volume;
		return result;
	}	
	

	public float[][][] shiftDim(float[][][] image, int nDims) {
		int width = image.length;
		int height = image[0].length;
		int depth = image[0][0].length;
		nDims = nDims % 3;
		float[][][] result;
		if (nDims == 1) {
			result = new float[height][depth][width];
			for (int x = 0; x < height; x++) {
				for (int y = 0; y < depth; y++) {
					for (int z = 0; z < width; z++) {
						result[x][y][z] = image[y][z][x];
					}
				}
			}
		} else if (nDims == 2) {
			result = new float[depth][width][height];
			for (int x = 0; x < depth; x++) {
				for (int y = 0; y < width; y++) {
					for (int z = 0; z < height; z++) {
						result[x][y][z] = image[z][x][y];
					}
				}
			}
		} else return image;
		return result;
	}	

	
	

}
