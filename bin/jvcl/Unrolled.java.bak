/* Copyright (c) 2015 Eric Barnhill
*
*Permission is hereby granted, free of charge, to any person obtaining a copy
*of this software and associated documentation files (the "Software"), to deal
*in the Software without restriction, including without limitation the rights
*to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*copies of the Software, and to permit persons to whom the Software is
*furnished to do so, subject to the following conditions:
*
*The above copyright notice and this permission notice shall be included in all
*copies or substantial portions of the Software.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*SOFTWARE.
*/

package jvcl;

import org.apache.commons.math4.complex.Complex;
import org.apache.commons.math4.complex.ComplexUtils;

public class Unrolled {
	
	/** Unrolled convolutions for small gs. This produces a performance boost despite the claims that the JVM makes it unnecessary,
	* particularly when the convolution is fast enough that the JVM is still warming up. If you used the Autotuner the root Convolve class will
	* call these unrolled methods when they benefit you.
	*/
	public Unrolled() {}
	
	public double[][] f;
	public double[][] g;
	
	public int setF(double[][] f) {
		this.f = f;
		return 0;
	}
	
	public int setG(double[][] g) {
		this.g= g;
		return 0;
	}
	
	public String printF() {
		return Double.toString(g[1][1]);
	}
	
	public double[][] finishBoundaries2d(double[] fPad, double[] gg, double[] r,
			int gi, int gj, int hgi, int hgie, int hgj, int hgje, int ri, int rj) {
		int ai, aj;
		for (int i = 0; i < hgi; i++) {
			for (int j = 0; j < rj; j++) {
				for (int p = 0; p < gi; p++) {
					for (int q = 0; q < gj; q++) {
						ai = i + (p - hgie);
						aj = j + (q - hgje);
						if (ai >= 0 && ai < ri) {
							if (aj >= 0 && aj < rj) {
								r[i + j*ri] += fPad[ai + aj*ri]*gg[(gi-1-p) + (gj-1-q)*gi];
							}
						}
					}
				}
			}
		}
		for (int i = ri-hgie-1; i < ri-1; i++) {
			for (int j = 0; j < rj; j++) {
				for (int p = 0; p < gi; p++) {
					for (int q = 0; q < gj; q++) {
						ai = i + (p - hgie);
						aj = j + (q - hgje);
						if (ai >= 0 && ai < ri) {
							if (aj >= 0 && aj < rj) {
								r[i + j*ri] += fPad[ai + aj*ri]*gg[(gi-1-p) + (gj-1-q)*gi];
							}
						}
					}
				}
			}
		}
		for (int i = hgi; i < ri-hgie; i++) {
			for (int j = rj-hgje; j < rj-1; j++) {
				for (int p = 0; p < gi; p++) {
					for (int q = 0; q < gj; q++) {
						ai = i + (p - hgie);
						aj = j + (q - hgje);
						if (ai >= 0 && ai < ri) {
							if (aj >= 0 && aj < rj) {
								r[i + j*ri] += fPad[ai + aj*ri]*gg[(gi-1-p) + (gj-1-q)*gi];
							}
						}
					}
				}
			}
		}
		for (int i = hgi; i < ri-hgie; i++) {
			for (int j = rj-hgje; j < rj-1; j++) {
				for (int p = 0; p < gi; p++) {
					for (int q = 0; q < gj; q++) {
						ai = i + (p - hgie);
						aj = j + (q - hgje);
						if (ai >= 0 && ai < ri) {
							if (aj >= 0 && aj < rj) {
								r[i + j*ri] += fPad[ai + aj*ri]*gg[(gi-1-p) + (gj-1-q)*gi];
							}
						}
					}
				}
			}
		}
		return JVCLUtils.devectorise(r, ri);
	}
	

	public Complex[][] finishBoundaries2d(Complex[] fPad, Complex[] gg, Complex[] r,
			int gi, int gj, int hgi, int hgie, int hgj, int hgje, int ri, int rj) {
		int ai, aj;
		for (int i = 0; i < hgi; i++) {
			for (int j = 0; j < rj; j++) {
				for (int p = 0; p < gi; p++) {
					for (int q = 0; q < gj; q++) {
						ai = i + (p - hgie);
						aj = j + (q - hgje);
						if (ai >= 0 && ai < ri) {
							if (aj >= 0 && aj < rj) {
								r[i + j*ri].add(fPad[ai + aj*ri].multiply(gg[(gi-1-p) + (gj-1-q)*gi]));
							}
						}
					}
				}
			}
		}
		for (int i = ri-hgie-1; i < ri-1; i++) {
			for (int j = 0; j < rj; j++) {
				for (int p = 0; p < gi; p++) {
					for (int q = 0; q < gj; q++) {
						ai = i + (p - hgie);
						aj = j + (q - hgje);
						if (ai >= 0 && ai < ri) {
							if (aj >= 0 && aj < rj) {
								r[i + j*ri].add(fPad[ai + aj*ri].multiply(gg[(gi-1-p) + (gj-1-q)*gi]));
							}
						}
					}
				}
			}
		}
		for (int i = hgi; i < ri-hgie; i++) {
			for (int j = rj-hgje; j < rj-1; j++) {
				for (int p = 0; p < gi; p++) {
					for (int q = 0; q < gj; q++) {
						ai = i + (p - hgie);
						aj = j + (q - hgje);
						if (ai >= 0 && ai < ri) {
							if (aj >= 0 && aj < rj) {
								r[i + j*ri].add(fPad[ai + aj*ri].multiply(gg[(gi-1-p) + (gj-1-q)*gi]));
							}
						}
					}
				}
			}
		}
		for (int i = hgi; i < ri-hgie; i++) {
			for (int j = rj-hgje; j < rj-1; j++) {
				for (int p = 0; p < gi; p++) {
					for (int q = 0; q < gj; q++) {
						ai = i + (p - hgie);
						aj = j + (q - hgje);
						if (ai >= 0 && ai < ri) {
							if (aj >= 0 && aj < rj) {
								r[i + j*ri].add(fPad[ai + aj*ri].multiply(gg[(gi-1-p) + (gj-1-q)*gi]));
							}
						}
					}
				}
			}
		}
		return JVCLUtils.devectorise(r, ri);
	}
	
	
	
	public static double[] convolve10(double[] f, double[] g, double[] r) {
		final int ri = r.length;
		for (int x = 5; x < ri-4; x++) {
			r[x] = 
				f[x-5]*g[9] + 
				f[x-4]*g[8] + 
				f[x-3]*g[7] + 
				f[x-2]*g[6] + 
				f[x-1]*g[5] + 
				f[x]*g[4] + 
				f[x+1]*g[3] + 
				f[x+2]*g[2] + 
				f[x+3]*g[1] + 
				f[x+4]*g[0];
		}
		r[0] = f[0]*g[4] + f[1]*g[3] + f[2]*g[2] + f[3]*g[1] + f[4]*g[0];
		r[1] = f[0]*g[5] + f[1]*g[4] + f[2]*g[3] + f[3]*g[2] + f[4]*g[1] + f[5]*g[0];
		r[2] = f[0]*g[6] + f[1]*g[5] + f[2]*g[4] + f[3]*g[3] + f[4]*g[2]  + f[5]*g[1] + f[6]*g[0];
		r[3] = f[0]*g[7] + f[1]*g[6] + f[2]*g[5] + f[3]*g[4] + f[4]*g[3]  + f[5]*g[2] + f[6]*g[1] + f[7]*g[0];
		r[4] = f[0]*g[8] + f[1]*g[7] + f[2]*g[6] + f[3]*g[5] + f[4]*g[4]  + f[5]*g[3] + f[6]*g[2] + f[7]*g[1] + f[8]*g[0];
		r[ri-1] = f[ri-1]*g[4] + f[ri-2]*g[5] + f[ri-3]*g[6] + f[ri-4]*g[7] + f[ri-5]*g[8] + f[ri-6]*g[9];
		r[ri-2] = f[ri-1]*g[3] + f[ri-2]*g[4] + f[ri-3]*g[5] + f[ri-4]*g[6] + f[ri-5]*g[7] + f[ri-6]*g[8] + f[ri-7]*g[9];
		r[ri-3] = f[ri-1]*g[2] + f[ri-2]*g[3] + f[ri-3]*g[4] + f[ri-4]*g[5] + f[ri-5]*g[6] + f[ri-6]*g[7] + f[ri-7]*g[8] + f[ri-8]*g[9];
		r[ri-4] = f[ri-1]*g[1] + f[ri-2]*g[2] + f[ri-3]*g[3] + f[ri-4]*g[4] + f[ri-5]*g[5] + f[ri-6]*g[6] + f[ri-7]*g[7] + f[ri-8]*g[8] + f[ri-9]*g[9];
		return r;
	}
	

	public static Complex[] convolve10(Complex[] f, Complex[] g, Complex[] r) {
		final int fi = f.length;
		final int gi = g.length;
		final int ri = r.length;
		for (int x = 5; x < ri-4; x++) {
			r[x] 
				.add(f[x-5].multiply(g[9])) 
				.add(f[x-4].multiply(g[8]))
				.add(f[x-3].multiply(g[7])) 
				.add(f[x-2].multiply(g[6])) 
				.add(f[x-1].multiply(g[5])) 
				.add(f[x].multiply(g[4])) 
				.add(f[x+1].multiply(g[3]))
				.add(f[x+2].multiply(g[2])) 
				.add(f[x+3].multiply(g[1])) 
				.add(f[x+4].multiply(g[0]));
		}
		r[0].add(f[0].multiply(g[4])).add(f[1].multiply(g[3])).add(f[2].multiply(g[2])).add(f[3].multiply(g[1])).add(f[4].multiply(g[0]));
		r[1].add(f[0].multiply(g[5])).add(f[1].multiply(g[4])).add(f[2].multiply(g[3])).add(f[3].multiply(g[2])).add(f[4].multiply(g[1])).add(f[5].multiply(g[0]));
		r[2].add(f[0].multiply(g[6])).add(f[1].multiply(g[5])).add(f[2].multiply(g[4])).add(f[3].multiply(g[3])).add(f[4].multiply(g[2] )).add(f[5].multiply(g[1])).add(f[6].multiply(g[0]));
		r[3].add(f[0].multiply(g[7])).add(f[1].multiply(g[6])).add(f[2].multiply(g[5])).add(f[3].multiply(g[4])).add(f[4].multiply(g[3] )).add(f[5].multiply(g[2])).add(f[6].multiply(g[1])).add(f[7].multiply(g[0]));
		r[4].add(f[0].multiply(g[8])).add(f[1].multiply(g[7])).add(f[2].multiply(g[6])).add(f[3].multiply(g[5])).add(f[4].multiply(g[4] )).add(f[5].multiply(g[3])).add(f[6].multiply(g[2])).add(f[7].multiply(g[1])).add(f[8].multiply(g[0]));
		r[ri-1].add(f[ri-1].multiply(g[4])).add(f[ri-2].multiply(g[5])).add(f[ri-3].multiply(g[6])).add(f[ri-4].multiply(g[7])).add(f[ri-5].multiply(g[8])).add(f[ri-6].multiply(g[9]));
		r[ri-2].add(f[ri-1].multiply(g[3])).add(f[ri-2].multiply(g[4])).add(f[ri-3].multiply(g[5])).add(f[ri-4].multiply(g[6])).add(f[ri-5].multiply(g[7])).add(f[ri-6].multiply(g[8])).add(f[ri-7].multiply(g[9]));
		r[ri-3].add(f[ri-1].multiply(g[2])).add(f[ri-2].multiply(g[3])).add(f[ri-3].multiply(g[4])).add(f[ri-4].multiply(g[5])).add(f[ri-5].multiply(g[6])).add(f[ri-6].multiply(g[7])).add(f[ri-7].multiply(g[8])).add(f[ri-8].multiply(g[9]));
		r[ri-4].add(f[ri-1].multiply(g[1])).add(f[ri-2].multiply(g[2])).add(f[ri-3].multiply(g[3])).add(f[ri-4].multiply(g[4])).add(f[ri-5].multiply(g[5])).add(f[ri-6].multiply(g[6])).add(f[ri-7].multiply(g[7])).add(f[ri-8].multiply(g[8])).add(f[ri-9].multiply(g[9]));
		return r;
	}
	
	public static Complex[] convolve10(Complex[] f, Complex[] g) {
		final int fi = f.length;
		final int gi = g.length;
		final int hgi = (int)( (gi - 1) / 2.0);
		final int hgie = (gi % 2 == 0) ? hgi + 1 : hgi;
		Complex[] fPad = JVCLUtils.zeroPadBoundaries(f, hgi, hgie);
		Complex[] r = JVCLUtils.zeroPadBoundaries(ComplexUtils.initialize(new Complex[fi]), hgi, hgie);
		return convolve10(fPad, g, r);
	}
	
	public static double[] convolve10(double[] f, double[] g) {
		final int fi = f.length;
		final int gi = g.length;
		final int hgi = (int)( (gi - 1) / 2.0);
		final int hgie = (gi % 2 == 0) ? hgi + 1 : hgi;
		double[] fPad = JVCLUtils.zeroPadBoundaries(f, hgi, hgie);
		double[] r = JVCLUtils.zeroPadBoundaries(new double[fi], hgi, hgie);
		return convolve10(fPad, g, r);
	}
	
	public static double[][] convolve10(double[][] f, double[] g, int dim) {
		if ( dim == 0) {
			f = JVCLUtils.shiftDim(f);
		}
		final int fi = f.length;
		final int fj = f[0].length;
		final int gi = g.length;
		final int hgi = (int)( (gi - 1) / 2.0);
		final int hgie = (gi % 2 == 0) ? hgi + 1 : hgi;
		double[][] fPad = JVCLUtils.zeroPadBoundaries(f, 0, 0, hgi, hgie);
		double[][] r = JVCLUtils.zeroPadBoundaries(new double[fi][fj], 0, 0, hgi, hgie);
		for (int x = 0; x < fi; x++) {
			r[x] = convolve10(fPad[x], g, r[x]);
		}
		if ( dim == 0) {
			f = JVCLUtils.shiftDim(r);
		}
        return r;
	}
	
	public static double[][][] convolve10(double[][][] f, double[] g, int dim) {
		if ( dim == 0) {
			f = JVCLUtils.shiftDim(f, 1);
		}
		if ( dim == 1) {
			f = JVCLUtils.shiftDim(f, 2);
		}
		final int fi = f.length;
		final int fj = f[0].length;
		final int fk = f[0][0].length;
		final int gi = g.length;
		final int hgi = (int)( (gi - 1) / 2.0);
		final int hgie = (gi % 2 == 0) ? hgi + 1 : hgi;
		double[][][] fPad = JVCLUtils.zeroPadBoundaries(f, 0, 0, 0, 0, hgi, hgie);
		double[][][] r = JVCLUtils.zeroPadBoundaries(new double[fi][fj][fk], 0, 0, 0, 0, hgi, hgie);
		for (int x = 0; x < fi; x++) {
			for (int y = 0; y < fj; y++) {
				r[x][y] = convolve10(fPad[x][y], g, r[x][y]);
			}
		}
		if ( dim == 0) {
			f = JVCLUtils.shiftDim(f, 2);
		}
		if ( dim == 1) {
			f = JVCLUtils.shiftDim(f, 1);
		}
        return r;
	}
	
	public static double[][][] convolve10(double[][][] f, double[] g) {
		return convolve10(f, g, 2);
	}
	
	public static Complex[][][] convolve10(Complex[][][] f, Complex[] g, int dim) {
		if ( dim == 0) {
			f = JVCLUtils.shiftDim(f, 1);
		}
		if ( dim == 1) {
			f = JVCLUtils.shiftDim(f, 2);
		}
		final int fi = f.length;
		final int fj = f[0].length;
		final int fk = f[0][0].length;
		final int gi = g.length;
		final int hgi = (int)( (gi - 1) / 2.0);
		final int hgie = (gi % 2 == 0) ? hgi + 1 : hgi;
		Complex[][][] fPad = JVCLUtils.zeroPadBoundaries(f, 0, 0, 0, 0, hgi, hgie);
		Complex[][][] r = JVCLUtils.zeroPadBoundaries(new Complex[fi][fj][fk], 0, 0, 0, 0, hgi, hgie);
		for (int x = 0; x < fi; x++) {
			for (int y = 0; y < fj; y++) {
				r[x][y] = convolve10(fPad[x][y], g, r[x][y]);
			}
		}
		if ( dim == 0) {
			f = JVCLUtils.shiftDim(f, 2);
		}
		if ( dim == 1) {
			f = JVCLUtils.shiftDim(f, 1);
		}
        return r;
	}
	
	public static Complex[][][] convolve10(Complex[][][] f, Complex[] g) {
		return convolve10(f, g, 2);
	}
	
	public static double[][] convolve10(double[][] f, double[] g) {
		return convolve10(f, g, 1);
	}
	
	public static Complex[][] convolve10(Complex[][] f, Complex[] g, int dim) {
		if ( dim == 0) {
			f = JVCLUtils.shiftDim(f);
		}
		final int fi = f.length;
		final int fj = f[0].length;
		final int gi = g.length;
		final int hgi = (int)( (gi - 1) / 2.0);
		final int hgie = (gi % 2 == 0) ? hgi + 1 : hgi;
		Complex[][] fPad = JVCLUtils.zeroPadBoundaries(f, 0, 0, hgi, hgie);
		Complex[][] r = JVCLUtils.zeroPadBoundaries(ComplexUtils.initialize(new Complex[fi][fj]), 0, 0, hgi, hgie);
		for (int x = 0; x < fi; x++) {
			r[x] = convolve10(fPad[x], g, r[x]);
		}
		if ( dim == 0) {
			f = JVCLUtils.shiftDim(r);
		}
        return r;
	}
	
	public static Complex[][] convolve10(Complex[][] f, Complex[] g) {
		return convolve10(f, g, 1);
	}
	
	public static void main(String[] args) {
		double[] g = new double[] {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
		double[][] f = new double[64][64];
		for (int n = 0; n < 64; n++) {
			f[n] = JVCLUtils.fillWithGradient(64);
		}
		Unrolled u = new Unrolled();
		long t1 = System.currentTimeMillis();
		long t2 = System.currentTimeMillis();
		double[][] fnt = u.convolve10(f, g, 0);
		long t3 = System.currentTimeMillis();
		System.out.format("Threads %.3f No Threads %.3f %n", (t2-t1)/1000.0, (t3-t2)/1000.0);
		//JVCLUtils.display2DArray(fnt, fnt.length, fnt[0].length, fnt.length, 0);
	}
	
	public void test() { System.out.println("TEST");}
	
	
	
}
