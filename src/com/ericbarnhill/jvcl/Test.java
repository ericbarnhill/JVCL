package com.ericbarnhill.jvcl;

import org.apache.commons.math4.complex.Complex;

import com.ericbarnhill.arrayMath.ArrayMath;

public class Test {

	public static Complex[][] convolve_12_12(Complex[][] f, Complex[][] g) {
        final int fi = f.length;
        final int fj = f[0].length;
        final int gi = g.length;
        final int gj = g[0].length;
        final int hgi = (int)( (gi - 1) / 2.0);
        final int hgj = (int)( (gj - 1) / 2.0);
        final int hgie = (gi % 2 == 0) ? hgi + 1 : hgi;
        final int hgje = (gj % 2 == 0) ? hgj + 1 : hgj;
        Complex[] gg = ArrayMath.vectorise(g);
        Complex[] fPad = ArrayMath.vectorise(JVCLUtils.zeroPadBoundaries(f, hgi, hgie, hgj, hgje));
        Complex[][] rr = JVCLUtils.zeroPadBoundaries(new Complex[fi][fj], hgi, hgie, hgj, hgje);
        final int ri = rr.length;
        final int rj = rr[0].length;
        Complex[] r = ArrayMath.vectorise(rr);
        int ij;
        for (int i = hgi; i < fi - 1 - hgie; i++) {
            for (int j = hgj; j < fj - 1 - hgje; j++) {
                ij = j*ri + i;
				r[ij] 
                .add(fPad[ij-6*ri-6].multiply(gg[0]))
                .add(fPad[ij-6*ri-5].multiply(gg[1]))
                .add(fPad[ij-6*ri-4].multiply(gg[2]))
                .add(fPad[ij-6*ri-3].multiply(gg[3]))
                .add(fPad[ij-6*ri-2].multiply(gg[4]))
                .add(fPad[ij-6*ri-1].multiply(gg[5]))
                .add(fPad[ij-6*ri+0].multiply(gg[6]))
                .add(fPad[ij-6*ri+1].multiply(gg[7]))
                .add(fPad[ij-6*ri+2].multiply(gg[8]))
                .add(fPad[ij-6*ri+3].multiply(gg[9]))
                .add(fPad[ij-6*ri+4].multiply(gg[10]))
                .add(fPad[ij-6*ri+5].multiply(gg[11]))
                .add(fPad[ij-5*ri-6].multiply(gg[12]))
                .add(fPad[ij-5*ri-5].multiply(gg[13]))
                .add(fPad[ij-5*ri-4].multiply(gg[14]))
                .add(fPad[ij-5*ri-3].multiply(gg[15]))
                .add(fPad[ij-5*ri-2].multiply(gg[16]))
                .add(fPad[ij-5*ri-1].multiply(gg[17]))
                .add(fPad[ij-5*ri+0].multiply(gg[18]))
                .add(fPad[ij-5*ri+1].multiply(gg[19]))
                .add(fPad[ij-5*ri+2].multiply(gg[20]))
                .add(fPad[ij-5*ri+3].multiply(gg[21]))
                .add(fPad[ij-5*ri+4].multiply(gg[22]))
                .add(fPad[ij-5*ri+5].multiply(gg[23]))
                .add(fPad[ij-4*ri-6].multiply(gg[24]))
                .add(fPad[ij-4*ri-5].multiply(gg[25]))
                .add(fPad[ij-4*ri-4].multiply(gg[26]))
                .add(fPad[ij-4*ri-3].multiply(gg[27]))
                .add(fPad[ij-4*ri-2].multiply(gg[28]))
                .add(fPad[ij-4*ri-1].multiply(gg[29]))
                .add(fPad[ij-4*ri+0].multiply(gg[30]))
                .add(fPad[ij-4*ri+1].multiply(gg[31]))
                .add(fPad[ij-4*ri+2].multiply(gg[32]))
                .add(fPad[ij-4*ri+3].multiply(gg[33]))
                .add(fPad[ij-4*ri+4].multiply(gg[34]))
                .add(fPad[ij-4*ri+5].multiply(gg[35]))
                .add(fPad[ij-3*ri-6].multiply(gg[36]))
                .add(fPad[ij-3*ri-5].multiply(gg[37]))
                .add(fPad[ij-3*ri-4].multiply(gg[38]))
                .add(fPad[ij-3*ri-3].multiply(gg[39]))
                .add(fPad[ij-3*ri-2].multiply(gg[40]))
                .add(fPad[ij-3*ri-1].multiply(gg[41]))
                .add(fPad[ij-3*ri+0].multiply(gg[42]))
                .add(fPad[ij-3*ri+1].multiply(gg[43]))
                .add(fPad[ij-3*ri+2].multiply(gg[44]))
                .add(fPad[ij-3*ri+3].multiply(gg[45]))
                .add(fPad[ij-3*ri+4].multiply(gg[46]))
                .add(fPad[ij-3*ri+5].multiply(gg[47]))
                .add(fPad[ij-2*ri-6].multiply(gg[48]))
                .add(fPad[ij-2*ri-5].multiply(gg[49]))
                .add(fPad[ij-2*ri-4].multiply(gg[50]))
                .add(fPad[ij-2*ri-3].multiply(gg[51]))
                .add(fPad[ij-2*ri-2].multiply(gg[52]))
                .add(fPad[ij-2*ri-1].multiply(gg[53]))
                .add(fPad[ij-2*ri+0].multiply(gg[54]))
                .add(fPad[ij-2*ri+1].multiply(gg[55]))
                .add(fPad[ij-2*ri+2].multiply(gg[56]))
                .add(fPad[ij-2*ri+3].multiply(gg[57]))
                .add(fPad[ij-2*ri+4].multiply(gg[58]))
                .add(fPad[ij-2*ri+5].multiply(gg[59]))
                .add(fPad[ij-1*ri-6].multiply(gg[60]))
                .add(fPad[ij-1*ri-5].multiply(gg[61]))
                .add(fPad[ij-1*ri-4].multiply(gg[62]))
                .add(fPad[ij-1*ri-3].multiply(gg[63]))
                .add(fPad[ij-1*ri-2].multiply(gg[64]))
                .add(fPad[ij-1*ri-1].multiply(gg[65]))
                .add(fPad[ij-1*ri+0].multiply(gg[66]))
                .add(fPad[ij-1*ri+1].multiply(gg[67]))
                .add(fPad[ij-1*ri+2].multiply(gg[68]))
                .add(fPad[ij-1*ri+3].multiply(gg[69]))
                .add(fPad[ij-1*ri+4].multiply(gg[70]))
                .add(fPad[ij-1*ri+5].multiply(gg[71]))
                .add(fPad[ij+0*ri-6].multiply(gg[72]))
                .add(fPad[ij+0*ri-5].multiply(gg[73]))
                .add(fPad[ij+0*ri-4].multiply(gg[74]))
                .add(fPad[ij+0*ri-3].multiply(gg[75]))
                .add(fPad[ij+0*ri-2].multiply(gg[76]))
                .add(fPad[ij+0*ri-1].multiply(gg[77]))
                .add(fPad[ij+0*ri+0].multiply(gg[78]))
                .add(fPad[ij+0*ri+1].multiply(gg[79]))
                .add(fPad[ij+0*ri+2].multiply(gg[80]))
                .add(fPad[ij+0*ri+3].multiply(gg[81]))
                .add(fPad[ij+0*ri+4].multiply(gg[82]))
                .add(fPad[ij+0*ri+5].multiply(gg[83]))
                .add(fPad[ij+1*ri-6].multiply(gg[84]))
                .add(fPad[ij+1*ri-5].multiply(gg[85]))
                .add(fPad[ij+1*ri-4].multiply(gg[86]))
                .add(fPad[ij+1*ri-3].multiply(gg[87]))
                .add(fPad[ij+1*ri-2].multiply(gg[88]))
                .add(fPad[ij+1*ri-1].multiply(gg[89]))
                .add(fPad[ij+1*ri+0].multiply(gg[90]))
                .add(fPad[ij+1*ri+1].multiply(gg[91]))
                .add(fPad[ij+1*ri+2].multiply(gg[92]))
                .add(fPad[ij+1*ri+3].multiply(gg[93]))
                .add(fPad[ij+1*ri+4].multiply(gg[94]))
                .add(fPad[ij+1*ri+5].multiply(gg[95]))
                .add(fPad[ij+2*ri-6].multiply(gg[96]))
                .add(fPad[ij+2*ri-5].multiply(gg[97]))
                .add(fPad[ij+2*ri-4].multiply(gg[98]))
                .add(fPad[ij+2*ri-3].multiply(gg[99]))
                .add(fPad[ij+2*ri-2].multiply(gg[100]))
                .add(fPad[ij+2*ri-1].multiply(gg[101]))
                .add(fPad[ij+2*ri+0].multiply(gg[102]))
                .add(fPad[ij+2*ri+1].multiply(gg[103]))
                .add(fPad[ij+2*ri+2].multiply(gg[104]))
                .add(fPad[ij+2*ri+3].multiply(gg[105]))
                .add(fPad[ij+2*ri+4].multiply(gg[106]))
                .add(fPad[ij+2*ri+5].multiply(gg[107]))
                .add(fPad[ij+3*ri-6].multiply(gg[108]))
                .add(fPad[ij+3*ri-5].multiply(gg[109]))
                .add(fPad[ij+3*ri-4].multiply(gg[110]))
                .add(fPad[ij+3*ri-3].multiply(gg[111]))
                .add(fPad[ij+3*ri-2].multiply(gg[112]))
                .add(fPad[ij+3*ri-1].multiply(gg[113]))
                .add(fPad[ij+3*ri+0].multiply(gg[114]))
                .add(fPad[ij+3*ri+1].multiply(gg[115]))
                .add(fPad[ij+3*ri+2].multiply(gg[116]))
                .add(fPad[ij+3*ri+3].multiply(gg[117]))
                .add(fPad[ij+3*ri+4].multiply(gg[118]))
                .add(fPad[ij+3*ri+5].multiply(gg[119]))
                .add(fPad[ij+4*ri-6].multiply(gg[120]))
                .add(fPad[ij+4*ri-5].multiply(gg[121]))
                .add(fPad[ij+4*ri-4].multiply(gg[122]))
                .add(fPad[ij+4*ri-3].multiply(gg[123]))
                .add(fPad[ij+4*ri-2].multiply(gg[124]))
                .add(fPad[ij+4*ri-1].multiply(gg[125]))
                .add(fPad[ij+4*ri+0].multiply(gg[126]))
                .add(fPad[ij+4*ri+1].multiply(gg[127]))
                .add(fPad[ij+4*ri+2].multiply(gg[128]))
                .add(fPad[ij+4*ri+3].multiply(gg[129]))
                .add(fPad[ij+4*ri+4].multiply(gg[130]))
                .add(fPad[ij+4*ri+5].multiply(gg[131]))
                .add(fPad[ij+5*ri-6].multiply(gg[132]))
                .add(fPad[ij+5*ri-5].multiply(gg[133]))
                .add(fPad[ij+5*ri-4].multiply(gg[134]))
                .add(fPad[ij+5*ri-3].multiply(gg[135]))
                .add(fPad[ij+5*ri-2].multiply(gg[136]))
                .add(fPad[ij+5*ri-1].multiply(gg[137]))
                .add(fPad[ij+5*ri+0].multiply(gg[138]))
                .add(fPad[ij+5*ri+1].multiply(gg[139]))
                .add(fPad[ij+5*ri+2].multiply(gg[140]))
                .add(fPad[ij+5*ri+3].multiply(gg[141]))
                .add(fPad[ij+5*ri+4].multiply(gg[142]))
                .add(fPad[ij+5*ri+5].multiply(gg[143]));
                }
            }
    return Boundaries.finishBoundaries2d(fPad, gg, r, gi, gj, hgi, hgie, hgj, hgje, ri, rj)
;    };
 // end convolve_12_12
}
